//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: SPK.bt
//   Authors: Alexandr Evdokimov
//   Version: 0.01
//   Purpose: Hitman Codename 47 SPK file
//
//   History: 
//    
//   2018.06 v 0.01 initial release 
//
//------------------------------------------------


typedef enum <char> {
  PSCR,
  PROT,
  MPROT,
  PCLPL,
  PVER,
  PFAC,
  PFTX,
  PUVC,
  PPOSD,
  APMTX8,
  ÀPEXC,
  PNAM,
  PHEA
} IDENTIFIER <name="Identifier">; 

// LittleEndian();
// BigEndian();

struct {
  char KPS[4] <name="KPS signature">;
  UINT MN; // ??
  UINT DataSize;
  UINT Count;
} HEADER <name="File Header">;

typedef struct {
  UINT type;
  if (type == 38) {
    UINT A; 
      string Name; 
      BYTE Count;
      string Name2; 
      BYTE Count;
      string Name3; 
      string Name4; 
  } else {
    UINT Z2; 
    string Name;  
    BYTE N0[3];
  };
} OBJECT <name=objName>;

string objName(OBJECT &obj) {
  return obj.Name;
}

struct {
  struct {
    IDENTIFIER ID[4];
    UINT ChunkSize;
    UINT DataSize;
  } HEADER;
  FLOAT K; // 0.5
  UINT Count; // scripts count
  //struct {
    string ScriptFileName <bgcolor=cGreen>;

    UINT Count;
    typedef struct (int arraySize) {
      OBJECT array[arraySize] <optimize=false>;
    } OBJECT_Array;       
    OBJECT_Array OBJECTs(Count) <name="Objects">;

    UINT A;
    UINT B;
    FLOAT L4; 

    UINT MN; 

    if (MN == 384) {
      UINT MN; 
      FLOAT MN;       
      UINT16 MN; 
      BYTE MN; 
      FLOAT B;      
    } else {
      struct {
        UINT MN; 
        BYTE A;
        UINT MN; 
      } ssd[11];
    };
 
    struct {
      BYTE type;
      if (type == 57) {
        string s2;
        string s3; 
      } else 
        if (type == 21) {
          string s1;
          BYTE B;
          string s2;
          string s3;   
      };
      UINT Count; 
      if (Count == 0) {

          UINT MN; 
          BYTE A;
          UINT16 MN; 
          BYTE A;
          BYTE B;
          BYTE C;             
        struct { 
          UINT MN;
          UINT MN; 
          BYTE A;
        } W1[4];

        struct {   
          BYTE A; 
          UINT16 A;
          UINT MN;
        } W2[2];  

        struct { 
          BYTE A; 
          UINT MN; 
          UINT MN; 
        } W3[4];
  
          BYTE A; 
          UINT16 A;
          UINT MN;

        
          UINT MN;
          BYTE A;
          UINT MN;

          UINT MN;
          BYTE A;
          UINT MN;
          BYTE A;
          UINT MN;
          UINT MN;
          BYTE A;
          UINT MN;
          BYTE A;
          UINT MN;
          BYTE A;
          UINT MN;
          BYTE A;
          UINT MN;
          BYTE A;
      };
      if (Count == 1) {
        UINT MN; 
        BYTE A;
        UINT MN; 
        UINT16 MN; 
        UINT MN;  
        BYTE A;
        UINT MN; 
        BYTE M67[5]; 
      };
    } IW[10] <optimize=false>;
 
 // } P[Count]; 
} PSCR;

struct {
  IDENTIFIER ID[5];
  UINT D;
  UINT F;
  UINT K;
  UINT L;
  UINT M;
} MPROT;

struct {
  IDENTIFIER ID[5];
} PCLPL;

struct {
  IDENTIFIER ID[4];
} PVER;