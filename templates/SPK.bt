//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: SPK.bt
//   Authors: Alexandr Evdokimov
//   Version: 0.01
//   Purpose: Hitman Codename 47 SPK file
//
//   History: 
//    
//   2018.06 v 0.01 initial release 
//
//------------------------------------------------

local uint i, Pos1, Pos2, Pos3, Count = 0;
local uint bitmask = 0x00FFFFFF;

typedef enum <char> {
  PSCR,
  PROT,
  PCLP,
  PVER,
  PFAC,
  PFTX,
  PUVC,
  POSD,
  PMTX,
  PEXC,
  PNAM,
  PHEA,
  APFA,
  PDAT,
  PDBL,
  ANDS,
  WAVC,
  SNDC,
  SETC,
  MTLS,
  MMPS,
  ROMS,
  SNDR,
  MATL,
  MTLV,
  PTXI,
  PZFI,
  DLCF,
} IDENTIFIER <name="Identifier">; 

// LittleEndian();
// BigEndian();

// --------------------------------------
// File Header
// --------------------------------------

struct {
  char KPS[4] <name="KPS signature">;
  UINT MN; // ??
  UINT DataSize;
  UINT ChunkCount;
} HEADER <name="File Header">;

// --------------------------------------
// Chunk Headers
// --------------------------------------

typedef struct {
  IDENTIFIER ID[4];
  UINT SectionSize;
  local uint ChunkOffset = FTell(); // save position after Chunk Header
  FSkip((SectionSize & bitmask) - 8); // skip chunk body
} CHUNK_HEADER <name=getHeaderID>;

typedef struct (uint size) {
  CHUNK_HEADER array[size] <optimize=false>;
} CHUNK_HEADERS;

CHUNK_HEADERS CH(HEADER.ChunkCount) <name="Chunk Headers">;

string getHeaderID(CHUNK_HEADER &CH) 
{
  return CH.ID;
};

// --------------------------------------
// Node Tree
// --------------------------------------

typedef struct {
  UINT Count;
  struct {
     UINT A;
     UINT B;
     // local uint C = B >> 30;
     switch (A)
     {
       case 1: 
         {
           UINT Unknown;
           UINT A;
           FSeek(4*A);
           struct {         
             DOUBLE A;
             DOUBLE A;
             DOUBLE A;
              // 
             struct {
               DOUBLE X;
               DOUBLE Y;
               DOUBLE Z;
               DOUBLE X;
               DOUBLE Y;
               DOUBLE Z;
               DOUBLE X;
               DOUBLE Y;
               DOUBLE Z;
            } MATRIX3X3; 
           } S[A];
         }; break; 
       case 2: 
         {
	       struct {
			  UINT16 A;						
		   } S[(B - 8) / 2];					
         }; break; 
       case 3: 
         {
           UINT Unknown;
           UINT A;

         }; break; 
       case 4: 
         {
           UINT Unknown;
           UINT A;

         }; break; 
       case 5: 
         {
           UINT Unknown;
           UINT A;

         }; break; 
     };   
  } PROPERTIES[Count];  
} PEXCNODE;

typedef struct {
  UINT SectionSize;
  BYTE A;
  string Name;
  UINT A;
  UINT A;
  UINT A;

    UINT A;
    UINT A;
    UINT16 A;
    BYTE A;
    BYTE A;


} PDBLNODE;

typedef struct {
  UINT PDVLOffset;
  UINT ExcOffset;
  UINT NameOffset;

  Pos2 = FTell();
  FSeek(CH.array[10].ChunkOffset + NameOffset); // jump to PNAM chunk 
  string Name; //
  FSeek(Pos2); 

  UINT Unknown;
  UINT Unknown;
  UINT16 Unknown;  

  if (PDVLOffset > 0) {
    Pos2 = FTell();
    FSeek(CH.array[13].ChunkOffset + PDVLOffset); // jump to PDBL chunk 
    PDBLNODE PDBL; 
    FSeek(Pos2); 
  };

  UINT16 Size; 
  if (Size == 32) {
  	UINT VertexOffset;
    UINT QuatsOffset;
    UINT TextureOffset;
    UINT FaceTextOffset;
    UINT VertexCount; 	
    UINT QuatsCount; 	
    UINT TextureCount;    
    UINT Unknown;
    UINT Flags;
  }; 

  if (ExcOffset > 0) {
    Pos3 = FTell();
    FSeek(CH.array[9].ChunkOffset + ExcOffset + 11);  // jump to PEXC chunk 
    PEXCNODE pexc; 
    FSeek(Pos3);
  };
} PHNODE;

typedef struct {

  UINT Offset <name="Offset(PHEA)">;

  Pos1 = FTell();
  FSeek(CH.array[11].ChunkOffset + Offset & bitmask); // jump to PHEA chunk 
  PHNODE PHNode;  
  FSeek(Pos1); // get back to PROT chunk 
   
  UINT ChunkSize;
  //
  if (ChunkSize != 8) {
    UINT DataSize;
    UINT ncount;
 	struct {
	    Tree(1);
	} SUB_NODES[ncount] <optimize=false>;
  }; 

} PRNODE <name=getNodeName>; 

string getNodeName(PRNODE & Node) 
{
  return Node.PHNode.Name;
};

void Tree(uint NodeCount) {
  PRNODE nodes[NodeCount] <optimize=false>;
};

FSeek(CH.array[1].ChunkOffset); // go to PROT chunk position
struct {
  UINT DataSize <name="PROT chunk size">;
  UINT RootCount;
  struct {
    Tree(RootCount);
  } TREE;
  UINT Unknown;  
} OBJECT_NODES <name="PROT Tree">;

FSeek(CH.array[2].ChunkOffset); // go to PCLP chunk position 
struct {
  UINT DataSize <name="PCLP chunk size">;
  UINT RootCount;
  struct {
    Tree(RootCount);
  } TREE;
  UINT Unknown;
} OBJECT_NODES <name="PCLP Tree">;

break;
 
// --------------------------------------
// Script objects
// --------------------------------------

typedef struct {
  UINT type;
  if (type == 38) {
    UINT A; 
      string Name; 
      BYTE Count;
      string Name2; 
      BYTE Count;
      string Name3; 
      string Name4; 
  } else {
    UINT Z2; 
    string Name;  
    BYTE N0[3];
  };
} OBJECT <name=objName>;

string objName(OBJECT &obj) {
  return obj.Name;
}

struct {
  struct {
    IDENTIFIER ID[4];
    UINT SectionSize;
    UINT DataSize;
  } HEADER;

  FSkip(HEADER.SectionSize - 12); 


  //FLOAT K; // 0.5
  //UINT ScriptCount; 

  //struct {
  //  string ScriptFileName <bgcolor=cGreen>;

  //  UINT Count;
  //  typedef struct (int arraySize) {
  //    OBJECT array[arraySize] <optimize=false>;
  //  } OBJECT_Array;       
  //  OBJECT_Array OBJECTs(Count) <name="Objects">;

  //  UINT SectionSize;
  //  UINT Size;
  //  FLOAT A; 

  //  UINT Count; 

  //  BYTE RR[2];
  //  UINT AO;    
  //  BYTE type;  
  //  string ObjName; 
  //  string ObjPropertyName;  
  //  UINT SectionSize;

  //  BYTE ABBBB;     
  //  UINT Count;

  //  struct {
  //    UBYTE type; 
  //    if (type == 0) {
  //      BYTE A[2];
  //      UBYTE type; 
  //    } else
  //    if (type != 57) {
  //      UINT Count;  
  //      BYTE type; 
  //    };       
  //    if (type == 57) {
  //      string ObjName; 
  //      string ObjMethodName;
  //    } else {  
  //      string EventName; 
  //    }; 
  //  } OBJECTS[Count] <optimize=false>;

  // BYTE AAT[425];

  // UINT A;
  // UINT A;
  // UINT A;
  // UINT A;
  // UINT A;
  // UINT Count;

  // struct {     
  //   string EventName;
  //   UINT A;
  //   UINT A; 
  // } U1[Count] <optimize=false>;

  // UINT Count;
  // struct {   
  //   string Name;
  //   UINT A;
  //   UINT A; 
  // } U2[14] <optimize=false>;
  //} SCRIPT[ScriptCount] <optimize=false>;
  //BYTE A; 
} PSCR;

// --------------------------------------
// Face Indexes
// --------------------------------------

struct {
  struct {
    IDENTIFIER ID[4];
    UINT SectionSize;
  } HEADER;
  
  local uint faceindexcount;
  faceindexcount = ((HEADER.SectionSize & SizeBitMask) - ChunkHeaderSize) / 2;
  typedef struct {
    UINT16 Index;  
  } FACE;
  FACE Faces[faceindexcount]; 
} PFAC; // faces

struct {
  struct {
    IDENTIFIER ID[4];
    UINT SectionSize;
  } HEADER;
  FSkip(HEADER.SectionSize - 8);    

  //struct {
  //  UINT B;
  //  UINT E;
  //  UINT Count;
  //  struct {
  //    UINT16 U;
  //    UINT16 U;
  //    UINT Index;
  //    UINT V;
  //  } MN0[Count];
  //} MN01[3] <optimize=false>;

} PFTX; 

// -------------------
// UV coordinates
// -------------------

struct {
  struct {
    IDENTIFIER ID[4];
    UINT SectionSize;
  } HEADER;

  local uint UVCcount;
  UVCcount = ((HEADER.SectionSize & SizeBitMask) - ChunkHeaderSize) / 4;
  typedef struct {
    FLOAT Coordinate;  
  } UVC;
  UVC UVCs[UVCcount]; 
} PUVC; // UVC

//break;